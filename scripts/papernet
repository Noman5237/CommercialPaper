#!/usr/bin/env bash
# This script was generated by bashly 0.8.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
papernet_usage() {
  if [[ -n $long_usage ]]; then
    printf "papernet - PaperNet scripts\n"
    echo

  else
    printf "papernet - PaperNet scripts\n"
    echo

  fi

  printf "Usage:\n"
  printf "  papernet [command]\n"
  printf "  papernet [command] --help | -h\n"
  printf "  papernet --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  completions   Generate bash completions"
  echo "  ca-server     Reload ca server with current configuration"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  FABRIC_CA_SERVER_HOME (required)"
    printf "    Location of the fabric CA server home directory\n"
    echo

  fi
}

# :command.usage
papernet_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "papernet completions\n"
    echo

    printf "  Generate bash completions\n  Usage: eval \"\$(papernet completions)\"\n"
    echo

  else
    printf "papernet completions - Generate bash completions\n"
    echo

  fi

  printf "Usage:\n"
  printf "  papernet completions\n"
  printf "  papernet completions --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
papernet_ca_server_usage() {
  if [[ -n $long_usage ]]; then
    printf "papernet ca-server - Reload ca server with current configuration\n"
    echo

  else
    printf "papernet ca-server - Reload ca server with current configuration\n"
    echo

  fi

  printf "Usage:\n"
  printf "  papernet ca-server ACTION\n"
  printf "  papernet ca-server --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  ACTION"
    printf "    Initialize or start the ca server\n"
    printf "    Allowed: init, start\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  papernet ca-cerver init\n"
    printf "  papernet ca-cerver start\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/send_completions.sh
send_completions() {
  echo $'# papernet completion                                      -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_papernet_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compline="${COMP_WORDS[@]:1:$COMP_CWORD-1}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'completions\'*)'
  echo $'      while read; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "--help -h" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ca-server\'*)'
  echo $'      while read; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "--help -h init start" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "--help --version -h -v ca-server completions" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _papernet_completions papernet'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
papernet_completions_command() {
  # src/completions_command.sh
  # Call the `send_completions` function which was added by running:
  #
  #   $ bashly add comp function
  #
  # Users can now enable bash completion for this script by running:
  #
  #   $ eval "$(cli completions)"
  #
  send_completions
}

# :command.function
papernet_ca_server_command() {
  # src/ca_server_command.sh

  # inspect_args
  # delete all files in the $FABRIC_CA_SERVER_HOME directory except fabric-ca-server-config.yaml
  pushd $FABRIC_CA_SERVER_HOME
  find . ! -name 'fabric-ca-server-config.yaml' -type f -exec rm -rf {} +
  popd
  fabric-ca-server ${args[action]}
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    papernet_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  if [[ -z "${FABRIC_CA_SERVER_HOME:-}" ]]; then
    printf "missing required environment variable: FABRIC_CA_SERVER_HOME\n"
    exit 1
  fi
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  completions )
    action="completions"
    shift
    papernet_completions_parse_requirements "$@"
    shift $#
    ;;

  ca-server )
    action="ca-server"
    shift
    papernet_ca_server_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    papernet_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
papernet_completions_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    papernet_completions_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="completions"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
papernet_ca_server_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    papernet_ca_server_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  if ! [[ -x "$(command -v fabric-ca-server)" ]]; then
    printf "missing dependency: fabric-ca-server\n"
    exit 1
  fi
  # :command.command_filter
  action="ca-server"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[action]+x} ]]; then
        # :argument.validations
        args[action]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[action]+x} ]]; then
    printf "missing required argument: ACTION\nusage: papernet ca-server ACTION\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  if [[ ! ${args[action]} =~ ^(init|start)$ ]]; then
    printf "%s\n" "action must be one of: init, start"
    exit 1
  fi
  # :command.user_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "completions" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      papernet_completions_usage
    else
      papernet_completions_command
    fi

  elif [[ $action == "ca-server" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      papernet_ca_server_usage
    else
      papernet_ca_server_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
